{"ast":null,"code":"import _classCallCheck from \"/Users/nvolpe/Desktop/view/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nvolpe/Desktop/view/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nvolpe/Desktop/view/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nvolpe/Desktop/view/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nvolpe/Desktop/view/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nvolpe/Desktop/view/client/src/modules/Subway.js\";\nimport React, { Component } from 'react';\nimport './Subway.scss';\nimport _ from \"lodash\";\nimport Moment from \"react-moment\";\nimport moment from \"moment\";\nimport io from \"socket.io-client\";\n\nvar Subway =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Subway, _Component);\n\n  function Subway() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Subway);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Subway)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      subway: {},\n      updated: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Subway, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var that = this;\n      this.props.socket.on(\"data\", function (data) {\n        if (data.subway) {\n          that.setState({\n            subway: data.subway.body,\n            updated: data.subway.timestamp\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!_.isEmpty(this.state.subway)) {\n        var subway = this.state.subway;\n        var stops = [];\n        subway.forEach(function (line) {\n          line.stops.forEach(function (stop) {\n            stops.push(stop);\n          });\n\n          if (line.stops.length > 3) {\n            line.stops.length = 3;\n          }\n        });\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          backgroundColor: this.props.color\n        },\n        className: \"module subway\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, !_.isEmpty(this.state.subway) ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, stops.map(function (stop, index) {\n        return React.createElement(\"div\", {\n          className: \"stop\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"line-\" + stop.line,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, stop.line)), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          className: \"group-name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, stop.station), stop.updates.map(function (update, index) {\n          return React.createElement(\"div\", {\n            className: \"update\",\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }, moment(update.time.low * 1000).fromNow());\n        }), !stop.updates.length ? React.createElement(\"div\", {\n          className: \"update\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, \"No trains\") : null));\n      }), React.createElement(\"p\", {\n        className: \"updated\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Moment, {\n        fromNow: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, this.state.updated))) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Loading\"));\n    }\n  }]);\n\n  return Subway;\n}(Component);\n\nexport default Subway;","map":{"version":3,"sources":["/Users/nvolpe/Desktop/view/client/src/modules/Subway.js"],"names":["React","Component","_","Moment","moment","io","Subway","state","subway","updated","that","props","socket","on","data","setState","body","timestamp","isEmpty","stops","forEach","line","stop","push","length","backgroundColor","color","map","index","station","updates","update","time","low","fromNow"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Subway.scss';\nimport _ from \"lodash\";\nimport Moment from \"react-moment\";\nimport moment from \"moment\";\nimport io from \"socket.io-client\";\n\nclass Subway extends Component {\n    state = {\n        subway: {},\n        updated: \"\"\n    }\n\n    componentDidMount() {\n        var that = this;\n        this.props.socket.on(\"data\", function (data) {\n            if (data.subway) {\n                that.setState({\n                    subway: data.subway.body,\n                    updated: data.subway.timestamp\n                });\n            }\n        });\n    }\n\n    render() {\n        if (!_.isEmpty(this.state.subway)) {\n            var subway = this.state.subway;\n            var stops = [];\n            subway.forEach(function (line) {\n                line.stops.forEach(function (stop) {\n                    stops.push(stop);\n                });\n                \n                if(line.stops.length > 3) {\n                    line.stops.length = 3;\n                }\n            });\n        }\n        return (\n            <div style={{ backgroundColor: this.props.color }} className=\"module subway\">\n                {!_.isEmpty(this.state.subway) ? (\n                    <div>\n                        {stops.map((stop, index) =>\n                            <div className=\"stop\" key={index}>\n                                <div>\n                                    <div className={\"line-\" + stop.line}>{stop.line}</div>\n                                </div>\n                                \n                                <div>\n                                    <h2 className=\"group-name\">{stop.station}</h2>\n                                    {stop.updates.map((update, index) =>\n                                        <div className=\"update\" key={index}>\n                                            {moment(update.time.low * 1000).fromNow()}\n                                        </div>\n                                    )}\n                                    {!stop.updates.length ? (\n                                        <div className=\"update\">No trains</div>\n                                    ): null}\n                                </div>\n                            </div>\n                        )}\n                        <p className=\"updated\"><Moment fromNow>{this.state.updated}</Moment></p>\n                    </div>\n                ) : <div>Loading</div>}\n            </div>\n        );\n    }\n}\n\nexport default Subway;"]},"metadata":{},"sourceType":"module"}